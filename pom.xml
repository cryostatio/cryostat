<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <groupId>io.cryostat</groupId>
  <artifactId>cryostat3</artifactId>
  <version>4.0.0-SNAPSHOT</version>

  <repositories>
    <repository>
      <id>s01.oss.sonatype.org-snapshot</id>
      <url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>
      <releases>
        <enabled>false</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>always</updatePolicy>
      </snapshots>
    </repository>
    <repository>
      <id>jmc-libs</id>
      <name>Adoptium JDK Mission Control Core Libraries</name>
      <url>https://adoptium.jfrog.io/artifactory/jmc-libs</url>
      <layout>default</layout>
    </repository>
  </repositories>

  <properties>
    <quarkus.application.version>${cryostat.imageVersionLower}</quarkus.application.version>
    <java.version>17</java.version>
    <maven.compiler.release>${java.version}</maven.compiler.release>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>
    <compiler-plugin.version>3.13.0</compiler-plugin.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <build.arch>amd64</build.arch>

    <io.cryostat.core.version>4.0.0-SNAPSHOT</io.cryostat.core.version>
    <org.openjdk.jmc.version>9.0.0</org.openjdk.jmc.version>

    <org.apache.commons.codec.version>1.16.1</org.apache.commons.codec.version>
    <org.apache.commons.io.version>2.13.0</org.apache.commons.io.version>
    <org.apache.commons.collections.version>4.4</org.apache.commons.collections.version>
    <org.apache.httpcomponents.version>5.2.1</org.apache.httpcomponents.version>
    <org.apache.commons.lang3.version>3.13.0</org.apache.commons.lang3.version>
    <org.apache.commons.validator.version>1.7</org.apache.commons.validator.version>
    <org.projectnessie.cel.bom.version>0.4.4</org.projectnessie.cel.bom.version>
    <com.google.protobuf-java.version>3.25.2</com.google.protobuf-java.version>
    <com.nimbusds.jose.jwt.version>9.37.3</com.nimbusds.jose.jwt.version>
    <org.testcontainers.bom.version>1.19.8</org.testcontainers.bom.version>
    <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>
    <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>
    <quarkus.platform.version>3.2.12.Final</quarkus.platform.version>
    <quarkus-quinoa.version>2.4.0</quarkus-quinoa.version>
    <io.netty.version>4.1.108.Final</io.netty.version>
    <org.codehaus.mojo.build.helper.plugin.version>3.6.0</org.codehaus.mojo.build.helper.plugin.version>
    <assembly-plugin.version>3.7.1</assembly-plugin.version>

    <com.github.spotbugs.version>4.8.6</com.github.spotbugs.version>
    <com.github.spotbugs.plugin.version>4.8.6.1</com.github.spotbugs.plugin.version>
    <com.diffplug.spotless.maven.plugin.version>2.43.0</com.diffplug.spotless.maven.plugin.version>
    <com.google.java-format.version>1.22.0</com.google.java-format.version>
    <com.mycila.license.maven.plugin.version>4.5</com.mycila.license.maven.plugin.version>
    <surefire-plugin.version>3.3.0</surefire-plugin.version>
    <surefire.rerunFailingTestsCount>2</surefire.rerunFailingTestsCount>
    <failsafe-plugin.version>3.3.0</failsafe-plugin.version>
    <io.fabric8.client.version>6.7.2</io.fabric8.client.version>
    <failsafe.rerunFailingTestsCount>${surefire.rerunFailingTestsCount}</failsafe.rerunFailingTestsCount>
  </properties>
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>io.netty</groupId>
        <artifactId>netty-bom</artifactId>
        <version>${io.netty.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>${quarkus.platform.group-id}</groupId>
        <artifactId>${quarkus.platform.artifact-id}</artifactId>
        <version>${quarkus.platform.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>${quarkus.platform.group-id}</groupId>
        <artifactId>quarkus-amazon-services-bom</artifactId>
        <version>${quarkus.platform.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.projectnessie.cel</groupId>
        <artifactId>cel-bom</artifactId>
        <version>${org.projectnessie.cel.bom.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.testcontainers</groupId>
        <artifactId>testcontainers-bom</artifactId>
        <version>${org.testcontainers.bom.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>io.cryostat</groupId>
      <artifactId>cryostat-core</artifactId>
      <version>${io.cryostat.core.version}</version>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmc</groupId>
      <artifactId>common</artifactId>
      <version>${org.openjdk.jmc.version}</version>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmc</groupId>
      <artifactId>flightrecorder</artifactId>
      <version>${org.openjdk.jmc.version}</version>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmc</groupId>
      <artifactId>flightrecorder.configuration</artifactId>
      <version>${org.openjdk.jmc.version}</version>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmc</groupId>
      <artifactId>flightrecorder.rules</artifactId>
      <version>${org.openjdk.jmc.version}</version>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmc</groupId>
      <artifactId>flightrecorder.rules.jdk</artifactId>
      <version>${org.openjdk.jmc.version}</version>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmc</groupId>
      <artifactId>jdp</artifactId>
      <version>${org.openjdk.jmc.version}</version>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmc</groupId>
      <artifactId>rjmx.common</artifactId>
      <version>${org.openjdk.jmc.version}</version>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-arc</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive-jackson</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-vertx</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-smallrye-openapi</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-smallrye-graphql</artifactId>
    </dependency>
    <dependency>
      <groupId>io.smallrye.reactive</groupId>
      <artifactId>smallrye-mutiny-vertx-web-client</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkiverse.quinoa</groupId>
      <artifactId>quarkus-quinoa</artifactId>
      <version>${quarkus-quinoa.version}</version>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-container-image-docker</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-websockets</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-hibernate-orm-panache</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-hibernate-validator</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-jdbc-postgresql</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkiverse.amazonservices</groupId>
      <artifactId>quarkus-amazon-s3</artifactId>
    </dependency>
    <dependency>
      <groupId>software.amazon.awssdk</groupId>
      <artifactId>url-connection-client</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>${org.apache.commons.lang3.version}</version>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <version>${org.apache.commons.codec.version}</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>${org.apache.commons.io.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-collections4</artifactId>
      <version>${org.apache.commons.collections.version}</version>
    </dependency>
    <dependency>
      <groupId>org.projectnessie.cel</groupId>
      <artifactId>cel-tools</artifactId>
    </dependency>
    <dependency>
      <groupId>org.projectnessie.cel</groupId>
      <artifactId>cel-jackson</artifactId>
    </dependency>
    <!-- FIXME this is a forced version override of the protobuf required by projectnessie -->
    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java</artifactId>
      <version>${com.google.protobuf-java.version}</version>
    </dependency>
    <dependency>
      <groupId>commons-validator</groupId>
      <artifactId>commons-validator</artifactId>
      <version>${org.apache.commons.validator.version}</version>
    </dependency>
    <dependency>
      <groupId>com.nimbusds</groupId>
      <artifactId>nimbus-jose-jwt</artifactId>
      <version>${com.nimbusds.jose.jwt.version}</version>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-rest-client-reactive-jackson</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-cache</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-quartz</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.googlejavaformat</groupId>
      <artifactId>google-java-format</artifactId>
      <version>${com.google.java-format.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>io.fabric8</groupId>
      <artifactId>kubernetes-client</artifactId>
      <version>${io.fabric8.client.version}</version>
    </dependency>

    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-junit5</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-junit5-mockito</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.github.spotbugs</groupId>
      <artifactId>spotbugs-annotations</artifactId>
      <version>${com.github.spotbugs.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>testcontainers</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>${quarkus.platform.group-id}</groupId>
        <artifactId>quarkus-maven-plugin</artifactId>
        <version>${quarkus.platform.version}</version>
        <extensions>true</extensions>
        <executions>
          <execution>
            <id>build</id>
            <goals>
              <goal>build</goal>
              <goal>generate-code</goal>
              <goal>generate-code-tests</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <jvmArgs>-Dcryostat.discovery.jdp.enabled=true -Dcryostat.discovery.podman.enabled=true -XX:+FlightRecorder -XX:StartFlightRecording=name=onstart,settings=default,disk=true,maxage=5m -Dcom.sun.management.jmxremote.autodiscovery=true -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9091 -Dcom.sun.management.jmxremote.rmi.port=9091 -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false</jvmArgs>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${compiler-plugin.version}</version>
        <configuration>
          <compilerArgs>
            <arg>-parameters</arg>
          </compilerArgs>
          <annotationProcessorPaths>
            <path>
              <groupId>io.quarkus</groupId>
              <artifactId>quarkus-panache-common</artifactId>
              <version>${quarkus.platform.version}</version>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>${org.codehaus.mojo.build.helper.plugin.version}</version>
        <executions>
          <execution>
            <id>image-tag-to-lower</id>
            <phase>validate</phase>
            <goals>
              <goal>regex-property</goal>
            </goals>
            <configuration>
              <name>cryostat.imageVersionLower</name>
              <regex>^.*$</regex>
              <value>${project.version}</value>
              <replacement>${project.version}</replacement>
              <toLowerCase>true</toLowerCase>
              <failIfNoMatch>false</failIfNoMatch>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>${com.diffplug.spotless.maven.plugin.version}</version>
        <executions>
          <execution>
            <id>spotless</id>
            <phase>process-sources</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <java>
            <googleJavaFormat>
              <version>${com.google.java-format.version}</version>
              <style>AOSP</style>
              <reflowLongStrings>true</reflowLongStrings>
            </googleJavaFormat>
            <trimTrailingWhitespace />
            <endWithNewline />
            <importOrder>
              <order>java,javax,org.openjdk.jmc,io.cryostat,</order>
            </importOrder>
            <removeUnusedImports />
          </java>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
        <version>${com.github.spotbugs.plugin.version}</version>
        <executions>
          <execution>
            <id>spotbugs</id>
            <phase>verify</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <excludeFilterFile>spotbugs-excludes.xml</excludeFilterFile>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.mycila</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <version>${com.mycila.license.maven.plugin.version}</version>
        <executions>
          <execution>
            <id>update-license</id>
            <phase>process-sources</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <licenseSets>
            <licenseSet>
              <header>LICENSE</header>
              <includes>
                <include>src/main/**/*.java</include>
                <include>src/test/**/*.java</include>
              </includes>
              <excludes>
                <exclude>src/main/java/io/cryostat/util/OutputToReadStream.java</exclude>
              </excludes>
            </licenseSet>
          </licenseSets>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${surefire-plugin.version}</version>
        <configuration>
          <systemPropertyVariables>
            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
            <maven.home>${maven.home}</maven.home>
          </systemPropertyVariables>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${failsafe-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
            <configuration>
              <skipTests>${skipTests}</skipTests>
              <skipITs>${skipITs}</skipITs>
              <runOrder>random</runOrder>
              <systemPropertyVariables>
                <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>
                <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                <maven.home>${maven.home}</maven.home>
              </systemPropertyVariables>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <reporting />
  <profiles>
    <profile>
      <id>native</id>
      <activation>
        <property>
          <name>native</name>
        </property>
      </activation>
      <properties>
        <skipITs>false</skipITs>
        <quarkus.package.type>native</quarkus.package.type>
      </properties>
    </profile>

    <profile>
      <id>default-arch</id>
      <activation>
        <property>
          <name>!build.arch</name>
        </property>
      </activation>
      <properties>
        <io.netty.netty-transport-native-epoll.classifier>linux-x86_64</io.netty.netty-transport-native-epoll.classifier>
        <io.netty.netty-transport-native-epoll.scope>compile</io.netty.netty-transport-native-epoll.scope>
      </properties>
    </profile>
    <profile>
      <id>amd64</id>
      <activation>
        <property>
          <name>build.arch</name>
          <value>amd64</value>
        </property>
      </activation>
      <properties>
        <io.netty.netty-transport-native-epoll.classifier>linux-x86_64</io.netty.netty-transport-native-epoll.classifier>
        <io.netty.netty-transport-native-epoll.scope>compile</io.netty.netty-transport-native-epoll.scope>
      </properties>
    </profile>
    <profile>
      <id>arm64</id>
      <activation>
        <property>
          <name>build.arch</name>
          <value>arm64</value>
        </property>
      </activation>
      <properties>
        <io.netty.netty-transport-native-epoll.classifier>linux-aarch_64</io.netty.netty-transport-native-epoll.classifier>
        <io.netty.netty-transport-native-epoll.scope>compile</io.netty.netty-transport-native-epoll.scope>
      </properties>
    </profile>
    <profile>
      <id>with-epoll</id>
      <activation>
        <property>
          <name>!build.exclude-epoll</name>
        </property>
      </activation>
      <properties>
        <io.netty.netty-transport-native-epoll.scope>compile</io.netty.netty-transport-native-epoll.scope>
      </properties>
      <dependencies>
        <dependency>
          <groupId>io.netty</groupId>
          <artifactId>netty-transport-native-epoll</artifactId>
          <version>${io.netty.version}</version>
          <classifier>${io.netty.netty-transport-native-epoll.classifier}</classifier>
          <scope>${io.netty.netty-transport-native-epoll.scope}</scope>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <id>no-epoll</id>
      <activation>
        <property>
          <name>build.exclude-epoll</name>
        </property>
      </activation>
      <properties>
        <io.netty.netty-transport-native-epoll.classifier>linux-x86_64</io.netty.netty-transport-native-epoll.classifier>
        <io.netty.netty-transport-native-epoll.scope>provided</io.netty.netty-transport-native-epoll.scope>
      </properties>
      <dependencies>
        <dependency>
          <groupId>io.netty</groupId>
          <artifactId>netty-transport-native-epoll</artifactId>
          <classifier>${io.netty.netty-transport-native-epoll.classifier}</classifier>
          <scope>${io.netty.netty-transport-native-epoll.scope}</scope>
        </dependency>
      </dependencies>
    </profile>

    <profile>
      <id>dist</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
            <version>${assembly-plugin.version}</version>
            <configuration>
              <descriptors>
                <descriptor>src/assembly/quarkus-app.xml</descriptor>
              </descriptors>
              <tarLongFileMode>posix</tarLongFileMode>
            </configuration>
            <executions>
              <execution>
                <id>assemble-quarkus-app</id>
                <phase>package</phase>
                <goals>
                  <goal>single</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
