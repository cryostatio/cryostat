---
components:
  schemas:
    AnalysisResult:
      properties:
        evaluation:
          $ref: '#/components/schemas/Evaluation'
        name:
          type: string
        score:
          format: double
          type: number
        topic:
          type: string
      type: object
    Annotations:
      properties:
        cryostat:
          additionalProperties:
            type: string
          type: object
        platform:
          additionalProperties:
            type: string
          type: object
      type: object
    Annotations_Flat:
      properties:
        cryostat:
          additionalProperties:
            type: string
          type: object
        platform:
          additionalProperties:
            type: string
          type: object
      type: object
    ApplicationHealth:
      properties:
        build:
          $ref: '#/components/schemas/BuildInfo'
        cryostatVersion:
          type: string
        dashboardAvailable:
          type: boolean
        dashboardConfigured:
          type: boolean
        datasourceAvailable:
          type: boolean
        datasourceConfigured:
          type: boolean
        reportsAvailable:
          type: boolean
        reportsConfigured:
          type: boolean
      type: object
    ArchivedRecording:
      properties:
        archivedTime:
          format: int64
          type: integer
        downloadUrl:
          type: string
        jvmId:
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          type: string
        reportUrl:
          type: string
        size:
          format: int64
          type: integer
      type: object
    ArchivedRecordingDirectory:
      properties:
        connectUrl:
          type: string
        jvmId:
          type: string
        recordings:
          items:
            $ref: '#/components/schemas/ArchivedRecording'
          type: array
      type: object
    AuthResponse:
      properties:
        username:
          type: string
      type: object
    BuildInfo:
      properties:
        git:
          $ref: '#/components/schemas/GitInfo'
        gitinfo:
          $ref: '#/components/schemas/GitInfo'
      type: object
    ContentType:
      enum:
        - NONE
        - BYTES
        - TIMESTAMP
        - MILLIS
        - NANOS
        - TICKS
        - ADDRESS
        - OS_THREAD
        - JAVA_THREAD
        - STACK_TRACE
        - CLASS
        - PERCENTAGE
      type: string
    Credential:
      properties:
        id:
          format: int64
          type: integer
        matchExpression:
          $ref: '#/components/schemas/MatchExpression'
        password:
          pattern: \S
          type: string
          writeOnly: true
        username:
          pattern: \S
          type: string
          writeOnly: true
      required:
        - matchExpression
        - username
        - password
      type: object
    CredentialMatchResult:
      properties:
        id:
          format: int64
          type: integer
        matchExpression:
          $ref: '#/components/schemas/MatchExpression'
        targets:
          items:
            $ref: '#/components/schemas/Target'
          type: array
      type: object
    CredentialTestResult:
      enum:
        - SUCCESS
        - FAILURE
        - NA
      type: string
    DashboardUrl:
      properties:
        grafanaDashboardUrl:
          type: string
      type: object
    DatasourceUrl:
      properties:
        grafanaDatasourceUrl:
          type: string
      type: object
    DiscoveryNode:
      properties:
        children:
          items:
            $ref: '#/components/schemas/DiscoveryNode'
          type: array
        id:
          format: int64
          type: integer
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          pattern: \S
          type: string
        nodeType:
          pattern: \S
          type: string
        target:
          $ref: '#/components/schemas/Target'
      required:
        - name
        - nodeType
        - labels
      type: object
    DiscoveryNode_Flat:
      properties:
        id:
          format: int64
          type: integer
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          pattern: \S
          type: string
        nodeType:
          pattern: \S
          type: string
        target:
          $ref: '#/components/schemas/Target_Flat'
      required:
        - name
        - nodeType
        - labels
      type: object
    DiscoveryPlugin:
      properties:
        builtin:
          readOnly: true
          type: boolean
        callback:
          format: uri
          type: string
        id:
          $ref: '#/components/schemas/UUID'
        realm:
          $ref: '#/components/schemas/DiscoveryNode'
      required:
        - id
        - realm
      type: object
    DiscoveryPlugin_Flat:
      properties:
        builtin:
          readOnly: true
          type: boolean
        callback:
          format: uri
          type: string
        id:
          $ref: '#/components/schemas/UUID'
        realm:
          $ref: '#/components/schemas/DiscoveryNode_Flat'
      required:
        - id
        - realm
      type: object
    Evaluation:
      properties:
        explanation:
          type: string
        solution:
          type: string
        suggestions:
          items:
            $ref: '#/components/schemas/Suggestion'
          type: array
        summary:
          type: string
      type: object
    Event:
      properties:
        clazz:
          type: string
        description:
          type: string
        fields:
          items:
            $ref: '#/components/schemas/Field'
          type: array
        id:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        methodDescriptor:
          type: string
        methodName:
          type: string
        name:
          type: string
        parameters:
          items:
            $ref: '#/components/schemas/MethodParameter'
          type: array
        path:
          type: string
        recordStackTrace:
          type: boolean
        returnValue:
          $ref: '#/components/schemas/MethodReturnValue'
        useRethrow:
          type: boolean
      type: object
    EventAvailability:
      enum:
        - AVAILABLE
        - ENABLED
        - DISABLED
        - NONE
        - UNKNOWN
      type: string
    Field:
      properties:
        contentType:
          $ref: '#/components/schemas/ContentType'
        converter:
          type: string
        description:
          type: string
        event:
          $ref: '#/components/schemas/Event'
        expression:
          type: string
        name:
          type: string
        relationKey:
          type: string
      type: object
    GitInfo:
      properties:
        hash:
          type: string
      type: object
    HttpServerResponse:
      properties:
        chunked:
          type: boolean
        statusCode:
          format: int32
          type: integer
        statusMessage:
          type: string
      type: object
    JsonObject:
      items:
        properties:
          key:
            type: string
          value: {}
        type: object
      type: array
    LinkedRecordingDescriptor:
      properties:
        continuous:
          type: boolean
        downloadUrl:
          type: string
        duration:
          format: int64
          type: integer
        id:
          format: int64
          type: integer
        maxAge:
          format: int64
          type: integer
        maxSize:
          format: int64
          type: integer
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          type: string
        remoteId:
          format: int64
          type: integer
        reportUrl:
          type: string
        startTime:
          format: int64
          type: integer
        state:
          $ref: '#/components/schemas/RecordingState'
        toDisk:
          type: boolean
      type: object
    Location:
      enum:
        - ENTRY
        - EXIT
        - WRAP
      type: string
    MatchExpression:
      properties:
        id:
          format: int64
          type: integer
        script:
          pattern: \S
          type: string
      required:
        - script
      type: object
    MatchedExpression:
      properties:
        expression:
          type: string
        id:
          format: int64
          type: integer
        targets:
          items:
            $ref: '#/components/schemas/Target'
          type: array
      type: object
    Metadata:
      properties:
        labels:
          additionalProperties:
            type: string
          type: object
      type: object
    MethodParameter:
      properties:
        contentType:
          $ref: '#/components/schemas/ContentType'
        converter:
          type: string
        description:
          type: string
        event:
          $ref: '#/components/schemas/Event'
        index:
          format: int32
          type: integer
        name:
          type: string
        relationKey:
          type: string
      type: object
    MethodReturnValue:
      properties:
        contentType:
          $ref: '#/components/schemas/ContentType'
        converter:
          type: string
        description:
          type: string
        event:
          $ref: '#/components/schemas/Event'
        name:
          type: string
        relationKey:
          type: string
      type: object
    PluginRegistration:
      properties:
        env:
          additionalProperties:
            type: string
          type: object
        id:
          type: string
        token:
          type: string
      type: object
    ProbeResponse:
      properties:
        description:
          type: string
        name:
          type: string
      type: object
    ProbeTemplate:
      properties:
        allowConverter:
          type: boolean
        allowToString:
          type: boolean
        classPrefix:
          type: string
        events:
          items:
            $ref: '#/components/schemas/Event'
          type: array
        fileName:
          type: string
      type: object
    ProbeTemplateResponse:
      properties:
        name:
          type: string
        xml:
          type: string
      type: object
    RecordingState:
      enum:
        - NEW
        - DELAYED
        - RUNNING
        - STOPPED
        - CLOSED
      type: string
    ReportRule:
      properties:
        id:
          type: string
        name:
          type: string
        requiredEvents:
          additionalProperties:
            $ref: '#/components/schemas/EventAvailability'
          type: object
        topic:
          type: string
      type: object
    RequestData:
      properties:
        matchExpression:
          type: string
        targetIds:
          items:
            format: int64
            type: integer
          type: array
      type: object
    Rule:
      properties:
        archivalPeriodSeconds:
          format: int32
          minimum: 0
          type: integer
        description:
          type: string
        enabled:
          type: boolean
        eventSpecifier:
          pattern: \S
          type: string
        id:
          format: int64
          type: integer
        initialDelaySeconds:
          format: int32
          minimum: 0
          type: integer
        matchExpression:
          $ref: '#/components/schemas/MatchExpression'
        maxAgeSeconds:
          format: int32
          minimum: -1
          type: integer
        maxSizeBytes:
          format: int32
          minimum: -1
          type: integer
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          pattern: \S
          type: string
        preservedArchives:
          format: int32
          minimum: 0
          type: integer
      required:
        - name
        - description
        - matchExpression
        - eventSpecifier
        - metadata
      type: object
    SerializableEventTypeInfo:
      properties:
        category:
          items:
            type: string
          type: array
        description:
          type: string
        name:
          type: string
        options:
          additionalProperties:
            $ref: '#/components/schemas/SerializableOptionDescriptor'
          type: object
        typeId:
          type: string
      type: object
    SerializableOptionDescriptor:
      properties:
        defaultValue:
          type: string
        description:
          type: string
        name:
          type: string
      type: object
    Suggestion:
      properties:
        name:
          type: string
        setting:
          type: string
        value:
          type: string
      type: object
    Target:
      properties:
        agent:
          readOnly: true
          type: boolean
        alias:
          pattern: \S
          type: string
        annotations:
          $ref: '#/components/schemas/Annotations'
        connectUrl:
          format: uri
          type: string
        id:
          format: int64
          type: integer
        jvmId:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
      required:
        - connectUrl
        - alias
        - labels
        - annotations
      type: object
    TargetStub:
      properties:
        alias:
          type: string
        connectUrl:
          format: uri
          type: string
        credential:
          anyOf:
            - $ref: '#/components/schemas/Credential'
            - type: "null"
        password:
          type: string
        username:
          type: string
      type: object
    Target_Flat:
      properties:
        agent:
          readOnly: true
          type: boolean
        alias:
          pattern: \S
          type: string
        annotations:
          $ref: '#/components/schemas/Annotations_Flat'
        connectUrl:
          format: uri
          type: string
        id:
          format: int64
          type: integer
        jvmId:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
      required:
        - connectUrl
        - alias
        - labels
        - annotations
      type: object
    Template:
      properties:
        description:
          type: string
        name:
          type: string
        provider:
          type: string
        type:
          $ref: '#/components/schemas/TemplateType'
      type: object
    TemplateType:
      enum:
        - TARGET
        - CUSTOM
        - PRESET
      type: string
    ThreadDump:
      properties:
        downloadUrl:
          type: string
        jvmId:
          type: string
        lastModified:
          format: int64
          type: integer
        size:
          format: int64
          type: integer
        threadDumpId:
          type: string
      type: object
    UUID:
      format: uuid
      pattern: '[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'
      type: string
info:
  contact:
    email: cryostat-development@googlegroups.com
    name: Cryostat Community
    url: https://cryostat.io
  description: Cloud-Native JDK Flight Recorder
  license:
    name: Apache 2.0
    url: https://github.com/cryostatio/cryostat/blob/main/LICENSE
  title: Cryostat API
  version: 4.1.0-snapshot
openapi: 3.1.0
paths:
  /api/beta/diagnostics/targets/{targetId}/gc:
    post:
      description: |
        Request the remote target to perform a garbage collection. The target JVM is free to ignore this
        request. This is generally equivalent to a System.gc() call made within the target JVM.
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "201":
          description: Created
      summary: Initiate a garbage collection on the specified target
      tags:
        - Diagnostics
  /api/beta/diagnostics/targets/{targetId}/threaddump:
    get:
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ThreadDump'
                type: array
          description: OK
      summary: Get Thread Dumps
      tags:
        - Diagnostics
    post:
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: format
          schema:
            default: threadPrint
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpServerResponse'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
        "400":
          description: Bad Request
      summary: Thread Dump
      tags:
        - Diagnostics
  /api/beta/diagnostics/targets/{targetId}/threaddump/{threadDumpId}:
    delete:
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: threadDumpId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
      summary: Delete Thread Dump
      tags:
        - Diagnostics
  /api/beta/diagnostics/threaddump/download/{encodedKey}:
    get:
      parameters:
        - in: path
          name: encodedKey
          required: true
          schema:
            type: string
        - in: query
          name: filename
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: OK
      summary: Handle Storage Download
      tags:
        - Diagnostics
  /api/beta/fs/recordings:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArchivedRecordingDirectory'
                type: array
          description: OK
      summary: List all archived recordings grouped by target
      tags:
        - Archived Recordings
  /api/beta/fs/recordings/{jvmId}:
    get:
      parameters:
        - in: path
          name: jvmId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArchivedRecordingDirectory'
                type: array
          description: OK
      summary: List all archived recordings belonging to the specified target
      tags:
        - Archived Recordings
  /api/beta/fs/recordings/{jvmId}/{filename}:
    delete:
      parameters:
        - in: path
          name: filename
          required: true
          schema:
            type: string
        - in: path
          name: jvmId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
      summary: Delete an archived recording by name belonging to the specified target
      tags:
        - Archived Recordings
  /api/beta/recordings/{connectUrl}/{filename}:
    delete:
      parameters:
        - description: the connection URL associated with the target
          in: path
          name: connectUrl
          required: true
          schema:
            type: string
        - in: path
          name: filename
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
      summary: Delete an archived recording belonging to the specified target
      tags:
        - Archived Recordings
  /api/beta/recordings/{jvmId}:
    get:
      parameters:
        - in: path
          name: jvmId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArchivedRecording'
                type: array
          description: OK
      summary: List archived recordings belonging to the specified target
      tags:
        - Archived Recordings
    post:
      description: |
        Upload a JFR binary file into the archives, associating the archived recording with a particular
        target JVM. This is primarily used by the Cryostat Agent for pushing harvested recording files.
      parameters:
        - in: path
          name: jvmId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                labels:
                  $ref: '#/components/schemas/JsonObject'
                maxFiles:
                  format: int32
                  type: integer
                recording:
                  format: binary
                  type: string
              type: object
        required: true
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
      summary: Upload a JFR binary file to archives, associated with a particular target
      tags:
        - Archived Recordings
  /api/v4.1/metrics/reports:
    get:
      description: |
        Retrieve the latest aggregate report data across all targets with recent automated analysis reports
        scores. These are multi-dimensional metrics in Prometheus format.
      responses:
        "200":
          content:
            text/plain:
              schema:
                items:
                  type: string
                type: array
          description: OK
      summary: Retrieve the latest aggregate report data
      tags:
        - Analysis Report Aggregator
  /api/v4.1/metrics/reports/{jvmId}:
    get:
      description: |
        Retrieve the latest aggregate report data for a given target's recent automated analysis reports
        scores. These are multi-dimensional metrics in Prometheus format.
      parameters:
        - in: path
          name: jvmId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Retrieve the latest aggregate report data for the specified target
      tags:
        - Analysis Report Aggregator
  /api/v4.1/reports_rules:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ReportRule'
                type: array
          description: OK
      summary: List Report Rules
      tags:
        - Reports
  /api/v4.1/targets/{targetId}/reports:
    get:
      description: |
        Get the current cached automated analysis report for the specified target, if any. If no such
        report currently exists for the specified target then the response will be an HTTP 404 Not Found,
        and automated analysis report generation will not be triggered.
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/AnalysisResult'
                type: object
          description: OK
      summary: Retrieve current automated analysis report for a target
      tags:
        - Reports
    post:
      description: |
        Composite action that 1) creates a Snapshot active recording on the specified target, 2) archives
        that Snapshot immediately, 3) performs automated analysis report generation on the archived file.
        The response will include a Location header pointing the client to an endpoint where the report can
        be retrieved, which may require the client to wait for a Job UUID notification.
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: clean
          schema:
            default: true
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpServerResponse'
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Perform "target analysis" on the specified target
      tags:
        - Reports
  /api/v4/activedownload/{id}:
    get:
      description: |
        Given a recording ID and a remote recording ID within that target, Cryostat will open a remote
        connection to the target and pipe back a data stream containing the Flight Recording binary file
        format for that recording. The client can feed this data to other tooling which ingests the JFR
        binary file format.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: OK
      summary: Download a Flight Recording binary file
      tags:
        - Active Recordings Download
  /api/v4/auth:
    post:
      description: |
        In modern Cryostat deployments it is customary to deploy Cryostat behind an authenticating reverse
        proxy, so authentication is not actually handled by Cryostat itself. This endpoint is used by the
        Cryostat Web UI client to send an authenticated client request, including some authentication
        headers, to the Cryostat server so that it can extract information about the logged-in user. The
        response contains the current user's username if it can be determined, or else an empty string.
        This is only used for display in the Web UI. API clients do not need to use this endpoint.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          description: OK
      summary: Authenticate to the Cryostat server
      tags:
        - Auth
  /api/v4/credentials:
    get:
      description: |
        Returns a list of match results. A match result includes the Stored Credential's ID,
        its Match Expression, and a list of currently discovered Targets which match that expression
        and are therefore candidates for Cryostat to select this Credential.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CredentialMatchResult'
                type: array
          description: OK
      summary: List information about all of the available Stored Credentials.
      tags:
        - Credentials
    post:
      description: |
        Define a new Stored Credential. Requires a match expression which defines which targets require
        this credential, and the username and password to use to pass authentication checks on those
        targets. Stored Credentials are stored in an encrypted keyring using symmetric encryption and an
        encryption key configured on the Cryostat database.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                matchExpression:
                  type: string
                password:
                  type: string
                username:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
          description: OK
        "400":
          description: Bad Request
      summary: Define a new Stored Credential
      tags:
        - Credentials
  /api/v4/credentials/test/{targetId}:
    post:
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                password:
                  type: string
                username:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialTestResult'
          description: OK
        "400":
          description: Bad Request
      summary: Test if the supplied username/password are valid credentials for the specified target.
      tags:
        - Credentials
  /api/v4/credentials/{id}:
    delete:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a Stored Credential
      tags:
        - Credentials
    get:
      description: |
        Get match result information about a specific Stored Credential. A match result includes the Stored
        Credential's ID, its Match Expression, and a list of currently discovered Targets which match that
        expression and are therefore candidates for Cryostat to select this Credential.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialMatchResult'
          description: OK
      summary: Get information about a Stored Credential
      tags:
        - Credentials
  /api/v4/discovery:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryNode'
          description: OK
      summary: Retrieve the entire discovery tree.
      tags:
        - Discovery
    post:
      description: |
        Register a new discovery plugin, or refresh an existing plugin's registration and generate a new
        token. New registrations require the realm and callback fields. Registration refreshers
        additionally require the id and token fields, which are supplied in the response to the original
        registration.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonObject'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PluginRegistration'
          description: OK
        "400":
          description: Bad Request
      summary: Register as a new discovery plugin or refresh existing registration
      tags:
        - Discovery
  /api/v4/discovery/{id}:
    delete:
      description: |
        Delete the plugin's registration along with its discovery Realm node and all of its children. This
        is used when a discovery plugin is shutting down.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
        - in: query
          name: token
          schema:
            type: string
      responses:
        "204":
          description: No Content
      summary: Delete the given plugin's registration
      tags:
        - Discovery
    get:
      description: |
        Endpoint for discovery plugins to check their own current registration status, ie. whether their
        registration ID is still known and their current token is still valid.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
        - in: query
          name: token
          schema:
            type: string
      responses:
        "204":
          description: No Content
      summary: Endpoint for discovery plugins to check their own registration status
      tags:
        - Discovery
    post:
      description: |
        Using its plugin ID and current token, a discovery plugin uses this endpoint to publish a JSON
        request body containing a list of discovery nodes. The discovery plugin itself is a Realm node in
        the overall discovery tree, so the published list of nodes here will replace the plugin Realm
        node's list of children.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
        - in: query
          name: token
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/DiscoveryNode'
              type: array
        required: true
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
      summary: Publish updated target discovery information
      tags:
        - Discovery
  /api/v4/discovery_plugins:
    get:
      description: |
        Retrieve a list of currently registered discovery plugins only, not including their subtrees.
      parameters:
        - in: query
          name: realm
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DiscoveryPlugin_Flat'
                type: array
          description: OK
      summary: List currently registered discovery plugins
      tags:
        - Discovery
  /api/v4/discovery_plugins/{id}:
    get:
      description: |
        Retrieve information about a specific discovery plugin, including its discovery Realm node and
        subtree.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryPlugin'
          description: OK
      summary: Retrieve a specific discovery plugin
      tags:
        - Discovery
  /api/v4/download/{encodedKey}:
    get:
      description: |
        Get a download URL for an archived recording. The response will be an HTTP redirect with a Location
        header pointing to the location where the client can download the recording JFR binary file.
      parameters:
        - in: path
          name: encodedKey
          required: true
          schema:
            type: string
        - in: query
          name: f
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: OK
      summary: Get a download URL for an archived recording
      tags:
        - Archived Recordings
  /api/v4/event_templates:
    get:
      description: |
        Retrieve a list of templates available on this Cryostat server. These templates can be applied to
        recordings started on any discovered target, but any event configurations within the template which
        reference events that do not exist on the target will be ignored.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Template'
                type: array
          description: OK
      summary: List server event templates
      tags:
        - Event Templates
    post:
      description: |
        Upload a new custom event template to the server. This must be in OpenJDK .jfc (XML) format.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                template:
                  format: binary
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
          description: OK
        "400":
          description: Bad Request
      summary: Upload a custom event template
      tags:
        - Event Templates
  /api/v4/event_templates/{templateName}:
    delete:
      description: |
        Delete a custom event template from the server. Only previously uploaded custom event templates can
        be deleted.
      parameters:
        - in: path
          name: templateName
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
      summary: Delete a custom event template
      tags:
        - Event Templates
  /api/v4/event_templates/{templateType}:
    get:
      parameters:
        - in: path
          name: templateType
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Template'
                type: array
          description: OK
      summary: List server event templates of the given type
      tags:
        - Event Templates
  /api/v4/event_templates/{templateType}/{templateName}:
    get:
      description: |
        Get the .jfc (XML) file definition for the given server event template. This is the same type of
        event configuration file that ships with OpenJDK distributions.
      parameters:
        - in: path
          name: templateName
          required: true
          schema:
            type: string
        - in: path
          name: templateType
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/xml:
              schema:
                type: string
          description: OK
      summary: Get a specific event template
      tags:
        - Event Templates
  /api/v4/grafana/{encodedKey}:
    post:
      description: |
        Upload an archived recording to the jfr-datasource for later online analysis in the associated
        Grafana dashboard.
      parameters:
        - in: path
          name: encodedKey
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpServerResponse'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
        "400":
          description: Bad Request
      summary: Upload an archived recording to Grafana for online analysis
      tags:
        - Archived Recordings
  /api/v4/grafana_dashboard_url:
    get:
      description: |
        Returns the URL for the associated Grafana dashboard instance. If there is an internally-accessible
        (for Cryostat) URL and an externally-accessible URL (for users) URL, the externally-accessible URL
        is preferred. If neither are configured then the response is an HTTP 400 Bad Request.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardUrl'
          description: OK
      summary: Return the URL which users can visit to access the associated Grafana dashboard instance.
      tags:
        - Health
  /api/v4/grafana_datasource_url:
    get:
      description: |
        Returns the URL for the jfr-datasource instance which Cryostat is configured to use. This datasource
        accepts JFR file uploads from Cryostat and allows the Grafana dashboard to perform queries on the
        data within the recording file.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasourceUrl'
          description: OK
      summary: Return the URL to the associated jfr-datasource instance.
      tags:
        - Health
  /api/v4/logout:
    post:
      deprecated: true
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: OK
      summary: |
        OAuth2 sign out. Invalidate the current user session.
        Clients should directly visit the /oauth2/sign_out endpoint rather than relying on this endpoint
        and its redirect response.
      tags:
        - Auth
  /api/v4/matchExpressions:
    get:
      description: |
        Retrieve a list of all currently defined Match Expressions. These objects cannot be created
        independently in the current API definition, so each of these expressions will be associated with
        an Automated Rule or Stored Credential.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  additionalProperties: {}
                  type: object
                type: array
          description: OK
      summary: Retrieve a list of all currently defined Match Expressions
      tags:
        - Match Expressions
    post:
      description: |
        Given a list of Target IDs, retrieve each Target instance from the database, then return the list
        filtered by the Targets which satisfy the Match Expression. If a given ID does not exist in the
        database then the whole request will fail. The expression must evaluate to a boolean value for each
        target. The match expression will not be stored.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestData'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchedExpression'
          description: OK
        "400":
          description: Bad Request
      summary: Test a MatchExpression against a list of Targets
      tags:
        - Match Expressions
  /api/v4/matchExpressions/{id}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchedExpression'
          description: OK
      summary: Retrieve a single Match Expression
      tags:
        - Match Expressions
  /api/v4/probes:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProbeTemplateResponse'
                type: array
          description: OK
      summary: List defined probe templates
      tags:
        - JMC Agent Templates
    post:
      description: |2
            Create a probe template. This requires a probe template file upload in XML format. See
            https://github.com/openjdk/jmc/blob/master/agent/README.md and
            https://github.com/openjdk/jmc/blob/master/agent/src/main/resources/org/openjdk/jmc/agent/impl/jfrprobes_schema.xsd
            for more information about this file format.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                probeTemplate:
                  format: binary
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProbeTemplate'
          description: OK
        "400":
          description: Bad Request
      summary: Create a probe template
      tags:
        - JMC Agent Templates
  /api/v4/probes/{probeTemplateName}:
    delete:
      parameters:
        - in: path
          name: probeTemplateName
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
      summary: Delete the specified probe template
      tags:
        - JMC Agent Templates
  /api/v4/recordings:
    get:
      description: |
        List all archived recordings from all targets, including (re-)uploaded files.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArchivedRecording'
                type: array
          description: OK
      summary: List all archived recordings
      tags:
        - Archived Recordings
    post:
      description: |
        (Re-)upload a JFR binary file into the archives. This allows for the restoration of archived files
        after they have been otherwise removed, or for portability across Cryostat instances or between
        Cryostat version upgrades. This can also be used to upload JFR files which were not collected by
        Cryostat, so that Cryostat can be used to perform online analysis of the file.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                labels:
                  $ref: '#/components/schemas/JsonObject'
                recording:
                  format: binary
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: {}
                type: object
          description: OK
        "400":
          description: Bad Request
      summary: Upload a JFR binary file to archives
      tags:
        - Archived Recordings
  /api/v4/recordings/{filename}:
    delete:
      deprecated: true
      parameters:
        - in: path
          name: filename
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
      summary: Delete an archived recording by filename
      tags:
        - Archived Recordings
  /api/v4/reports/{encodedKey}:
    get:
      description: |
        Given an encoded key from another endpoint, request an actual automated analysis report. If the
        requested report already exists in one of the tiered caching layers then the report will be
        directly returned as a JSON response body. If the report does not yet exist then the response will
        contain a Job UUID as a plain text response body. Cryostat will emit a WebSocket notification later
        using the same Job UUID to indicate that the report generation has been completed and the document
        is now available. The client may then re-issue a request to this endpoint with the same encoded key
        to retrieve the report document.
      parameters:
        - in: path
          name: encodedKey
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            default: ""
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpServerResponse'
        required: true
      responses:
        "200":
          description: OK
      summary: Get an automated analysis report
      tags:
        - Reports
  /api/v4/rules:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Rule'
                type: array
          description: OK
      summary: List all Automated Rules
      tags:
        - Rules
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
          application/x-www-form-urlencoded:
            schema:
              properties:
                archivalPeriodSeconds:
                  format: int32
                  type: integer
                description:
                  type: string
                enabled:
                  type: boolean
                eventSpecifier:
                  type: string
                initialDelaySeconds:
                  format: int32
                  type: integer
                matchExpression:
                  type: string
                maxAgeSeconds:
                  format: int32
                  type: integer
                maxSizeBytes:
                  format: int32
                  type: integer
                metadata:
                  type:
                    - string
                    - "null"
                name:
                  type: string
                preservedArchives:
                  format: int32
                  type: integer
              type: object
          multipart/form-data:
            schema:
              properties:
                archivalPeriodSeconds:
                  format: int32
                  type: integer
                description:
                  type: string
                enabled:
                  type: boolean
                eventSpecifier:
                  type: string
                initialDelaySeconds:
                  format: int32
                  type: integer
                matchExpression:
                  type: string
                maxAgeSeconds:
                  format: int32
                  type: integer
                maxSizeBytes:
                  format: int32
                  type: integer
                metadata:
                  type:
                    - string
                    - "null"
                name:
                  type: string
                preservedArchives:
                  format: int32
                  type: integer
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: OK
        "400":
          description: Bad Request
      summary: Create a new Automated Rule
      tags:
        - Rules
  /api/v4/rules/{name}:
    delete:
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: query
          name: clean
          schema:
            type: boolean
      responses:
        "204":
          description: No Content
      summary: Delete an Automated Rule by name
      tags:
        - Rules
    get:
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: OK
      summary: Get an Automated Rule by name
      tags:
        - Rules
    patch:
      description: |
        Update Automated Rule parameters, such as whether the rule is currently active or not.
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: query
          name: clean
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonObject'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: OK
      summary: Update an Automated Rule
      tags:
        - Rules
  /api/v4/targets:
    get:
      description: |
        Get a list of the currently discovered targets. These are essentialy the same as the leaf nodes of
        the discovery tree. See 'GET /api/v4/discovery'.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Target'
                type: array
          description: OK
      summary: List currently discovered targets
      tags:
        - Targets
    post:
      description: |
        Create a target definition given a JSON request body target stub. The target stub must contain the
        connectUrl and alias, and optionally contain a username and password to create a Stored Credential
        associated with this target. The dryrun parameter can be used to perform this operation as a check,
        to verify if such a target could be created (no connectUrl conflict and acceptable credentials).
      parameters:
        - in: query
          name: dryrun
          schema:
            type: boolean
        - in: query
          name: storeCredentials
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TargetStub'
          application/x-www-form-urlencoded:
            schema:
              properties:
                alias:
                  type: string
                connectUrl:
                  format: uri
                  type: string
                password:
                  type: string
                username:
                  type: string
              type: object
          multipart/form-data:
            schema:
              properties:
                alias:
                  type: string
                connectUrl:
                  format: uri
                  type: string
                password:
                  type: string
                username:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
          description: OK
        "400":
          description: Bad Request
      summary: Create a target definition
      tags:
        - Custom Discovery
  /api/v4/targets/{id}:
    delete:
      description: |
        Delete the specified target by ID. Only allows deletion of targets that were defined by the same
        Custom Target discovery API. Other targets must be removed by the discovery mechanisms which
        discovered them.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "204":
          description: No Content
      summary: Delete the specified target
      tags:
        - Custom Discovery
    get:
      description: |
        Get details about a particular target given its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
          description: OK
      summary: Get a target by ID
      tags:
        - Targets
  /api/v4/targets/{id}/event_templates:
    get:
      description: |
        Retrieve a list of event templates available on the given target when starting recordings on the
        same target. This includes all of the server's available templates, plus the templates available
        specifically from the target (ex. within /usr/lib/jvm/java/lib/jfr).
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Template'
                type: array
          description: OK
      summary: Retrieve a list of event templates available on the given target
      tags:
        - Target Event Templates
  /api/v4/targets/{id}/event_templates/{templateType}/{templateName}:
    get:
      description: |
        Get the .jfc (XML) file definition for the given target event template.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: templateName
          required: true
          schema:
            type: string
        - in: path
          name: templateType
          required: true
          schema:
            $ref: '#/components/schemas/TemplateType'
      responses:
        "200":
          content:
            application/xml:
              schema:
                type: string
          description: OK
      summary: Get a specific event template
      tags:
        - Target Event Templates
  /api/v4/targets/{id}/events:
    get:
      description: |
        Retrieve a list of JFR event types registered within the given target. This will include all
        built-in JFR types emitted by the target JVM, as well as custom event types specific to that
        target JVM if they are correctly registered. Custom event types, or event types emitted by plugins
        and extensions, may not always appear in this list.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: q
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SerializableEventTypeInfo'
                type: array
          description: OK
      summary: List JFR event types registered within the given target
      tags:
        - Events
  /api/v4/targets/{id}/probes:
    delete:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "204":
          description: No Content
      summary: Remove all loaded probes from the specified target
      tags:
        - JMC Agent Probes
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProbeResponse'
                type: array
          description: OK
      summary: List loaded probes on the specified target
      tags:
        - JMC Agent Probes
  /api/v4/targets/{id}/probes/{probeTemplateName}:
    post:
      description: |
        Activate a probe template (specified by template name) on the specified target (specified by ID).
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: probeTemplateName
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created
      summary: Activate a probe template on the specified target
      tags:
        - JMC Agent Probes
  /api/v4/targets/{targetId}/recordingOptions:
    get:
      description: |
        Retrieve a map of the current options for the specified target.
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: {}
                type: object
          description: OK
      summary: Get the current set of options for the specified target
      tags:
        - Recording Options
    patch:
      description: |
        Set default recording options for the specified target. These options will be applied to any
        recordings started on this target if no override values are specified when the recording is
        created.
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                maxAge:
                  type: string
                maxSize:
                  type: string
                toDisk:
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: {}
                type: object
          description: OK
      summary: Update the recording options for the specified target
      tags:
        - Recording Options
  /api/v4/targets/{targetId}/recordings:
    get:
      description: |
        Retrieve a list of active recordings currently present on the specified target. This may initiate
        a new remote connection to the target to update Cryostat's model of available recordings.
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LinkedRecordingDescriptor'
                type: array
          description: OK
      summary: List active recordings on the specified target
      tags:
        - Active Recordings
    post:
      description: |
        Create a new Flight Recording on the specified target. The recording will be immediately started
        and begin capturing Flight Recording data.
        The recording must be given a name (unique within the
        target). An event specifier string must be included, which follows the format
        "template={name},(type={type})". The type parameter is optional and the template name is required.
        See the Event Templates API for more information about the values that can be used here.
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                archiveOnStop:
                  type:
                    - boolean
                    - "null"
                duration:
                  format: int64
                  type:
                    - integer
                    - "null"
                events:
                  type: string
                maxAge:
                  format: int64
                  type:
                    - integer
                    - "null"
                maxSize:
                  format: int64
                  type:
                    - integer
                    - "null"
                metadata:
                  type:
                    - string
                    - "null"
                recordingName:
                  type: string
                replace:
                  type:
                    - string
                    - "null"
                restart:
                  deprecated: true
                  type:
                    - boolean
                    - "null"
                toDisk:
                  type:
                    - boolean
                    - "null"
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedRecordingDescriptor'
          description: OK
        "400":
          description: Bad Request
      summary: Start a new recording on the specified target
      tags:
        - Active Recordings
  /api/v4/targets/{targetId}/recordings/{remoteId}:
    delete:
      description: |
        Delete a recording from the specified target. This will remove it both from Cryostat's database
        as well as remove the recording and release all resources in the remote target JVM.
      parameters:
        - in: path
          name: remoteId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "204":
          description: No Content
      summary: Delete a recording from the specified target
      tags:
        - Active Recordings
    get:
      description: |
        Given a recording ID and a remote recording ID within that target, Cryostat will open a remote
        connection to the target and pipe back a data stream containing the Flight Recording binary file
        format for that recording. The client can feed this data to other tooling which ingests the JFR
        binary file format.
      parameters:
        - in: path
          name: remoteId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: OK
      summary: Download a Flight Recording binary file
      tags:
        - Active Recordings
    patch:
      description: |
        Remote recordings can be stopped by sending the request body "stop", or copied to archives by
        sending the request body "save". The body is case-insensitive.
      parameters:
        - in: path
          name: remoteId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpServerResponse'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Update a remote recording on the specified target
      tags:
        - Active Recordings
  /api/v4/targets/{targetId}/recordings/{remoteId}/upload:
    post:
      description: |
        Upload the current data stream of the specified recording to the jfr-datasource for online analysis
        in the associated Grafana dashboard.
      parameters:
        - in: path
          name: remoteId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpServerResponse'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
        "400":
          description: Bad Request
      summary: Upload a recording for analysis in Grafana dashboard
      tags:
        - Active Recordings
  /api/v4/targets/{targetId}/reports/{recordingId}:
    get:
      description: |
        Request an automated analysis report for a particular active recording on the specified target. If
        such a report already exists it will be returned directly as a JSON response body. If the report
        does not yet exist then an asynchronous task for it will be started, and a Job UUID will be
        sent as the plaintext response body.
      parameters:
        - in: path
          name: recordingId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: filter
          schema:
            default: ""
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpServerResponse'
        required: true
      responses:
        "200":
          description: OK
      summary: Get an automated analysis report for a particular recording on the specified target
      tags:
        - Reports
  /api/v4/targets/{targetId}/snapshot:
    post:
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedRecordingDescriptor'
          description: OK
      summary: Create a JFR Snapshot on the specified target
      tags:
        - Snapshots
  /api/v4/tls/certs:
    get:
      description: |
        In addition to the standard system/OpenJDK certificate trust store, Cryostat can be configured to
        trust additional certificates which may be presented by target JVM JMX servers or by Cryostat Agent
        HTTPS servers. This endpoint returns a list of local file paths to additional certificate files,
        which Cryostat will have loaded into an additional trust store at startup.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
      summary: List additional trusted SSL/TLS certificates
      tags:
        - Trust Store
  /health:
    get:
      description: |
        Returns a map indicating whether various external components (ex.
            jfr-datasource, grafana-dashboard) are configured and whether those
            components can be reached by the Cryostat application. Also includes
            application semantic version and build information.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationHealth'
          description: OK
      summary: Check the overall status of the application
      tags:
        - Health
  /health/liveness:
    get:
      description: |
        Performs a no-op on a worker thread. This is a simply check to determine if
        the application has available threads to service requests. HTTP 204 No Content
        is the only expected response. If the application is not live and no worker
        threads are available, then the client will never receive a response.
      responses:
        "204":
          description: No Content
      summary: Check if the application is able to accept and respond to requests.
      tags:
        - Health
tags:
  - description: |
      Endpoints for Discovery Plugins to register with a Cryostat instance, refresh their registration
      token, publish information about known targets, and unregister themselves.

      The reference implementation of a Discovery Plugin is the Cryostat Agent.
    name: Discovery
