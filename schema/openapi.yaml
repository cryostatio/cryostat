---
components:
  schemas:
    AnalysisResult:
      properties:
        evaluation:
          $ref: '#/components/schemas/Evaluation'
        name:
          type: string
        score:
          format: double
          type: number
        topic:
          type: string
      type: object
    Annotations:
      properties:
        cryostat:
          additionalProperties:
            type: string
          type: object
        platform:
          additionalProperties:
            type: string
          type: object
      type: object
    Annotations_Flat:
      properties:
        cryostat:
          additionalProperties:
            type: string
          type: object
        platform:
          additionalProperties:
            type: string
          type: object
      type: object
    ApplicationHealth:
      properties:
        build:
          $ref: '#/components/schemas/BuildInfo'
        cryostatVersion:
          type: string
        dashboardAvailable:
          type: boolean
        dashboardConfigured:
          type: boolean
        datasourceAvailable:
          type: boolean
        datasourceConfigured:
          type: boolean
        reportsAvailable:
          type: boolean
        reportsConfigured:
          type: boolean
      type: object
    ArchivedRecording:
      properties:
        archivedTime:
          format: int64
          type: integer
        downloadUrl:
          type: string
        jvmId:
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          type: string
        reportUrl:
          type: string
        size:
          format: int64
          type: integer
      type: object
    ArchivedRecordingDirectory:
      properties:
        connectUrl:
          type: string
        jvmId:
          type: string
        recordings:
          items:
            $ref: '#/components/schemas/ArchivedRecording'
          type: array
      type: object
    AuthResponse:
      properties:
        username:
          type: string
      type: object
    BuildInfo:
      properties:
        git:
          $ref: '#/components/schemas/GitInfo'
        gitinfo:
          $ref: '#/components/schemas/GitInfo'
      type: object
    ContentType:
      enum:
        - NONE
        - BYTES
        - TIMESTAMP
        - MILLIS
        - NANOS
        - TICKS
        - ADDRESS
        - OS_THREAD
        - JAVA_THREAD
        - STACK_TRACE
        - CLASS
        - PERCENTAGE
      type: string
    Credential:
      properties:
        id:
          format: int64
          type: integer
        matchExpression:
          $ref: '#/components/schemas/MatchExpression'
        password:
          pattern: \S
          type: string
          writeOnly: true
        username:
          pattern: \S
          type: string
          writeOnly: true
      required:
        - matchExpression
        - username
        - password
      type: object
    CredentialMatchResult:
      properties:
        id:
          format: int64
          type: integer
        matchExpression:
          $ref: '#/components/schemas/MatchExpression'
        targets:
          items:
            $ref: '#/components/schemas/Target'
          type: array
      type: object
    CredentialTestResult:
      enum:
        - SUCCESS
        - FAILURE
        - NA
      type: string
    DashboardUrl:
      properties:
        grafanaDashboardUrl:
          type: string
      type: object
    DatasourceUrl:
      properties:
        grafanaDatasourceUrl:
          type: string
      type: object
    DiscoveryNode:
      properties:
        children:
          items:
            $ref: '#/components/schemas/DiscoveryNode'
          type: array
        id:
          format: int64
          type: integer
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          pattern: \S
          type: string
        nodeType:
          pattern: \S
          type: string
        target:
          $ref: '#/components/schemas/Target'
      required:
        - name
        - nodeType
        - labels
      type: object
    DiscoveryNode_Flat:
      properties:
        id:
          format: int64
          type: integer
        labels:
          additionalProperties:
            type: string
          type: object
        name:
          pattern: \S
          type: string
        nodeType:
          pattern: \S
          type: string
        target:
          $ref: '#/components/schemas/Target_Flat'
      required:
        - name
        - nodeType
        - labels
      type: object
    DiscoveryPlugin:
      properties:
        builtin:
          readOnly: true
          type: boolean
        callback:
          format: uri
          type: string
        id:
          $ref: '#/components/schemas/UUID'
        realm:
          $ref: '#/components/schemas/DiscoveryNode'
      required:
        - id
        - realm
      type: object
    DiscoveryPlugin_Flat:
      properties:
        builtin:
          readOnly: true
          type: boolean
        callback:
          format: uri
          type: string
        id:
          $ref: '#/components/schemas/UUID_Flat'
        realm:
          $ref: '#/components/schemas/DiscoveryNode_Flat'
      required:
        - id
        - realm
      type: object
    Evaluation:
      properties:
        explanation:
          type: string
        solution:
          type: string
        suggestions:
          items:
            $ref: '#/components/schemas/Suggestion'
          type: array
        summary:
          type: string
      type: object
    Event:
      properties:
        clazz:
          type: string
        description:
          type: string
        fields:
          items:
            $ref: '#/components/schemas/Field'
          type: array
        id:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        methodDescriptor:
          type: string
        methodName:
          type: string
        name:
          type: string
        parameters:
          items:
            $ref: '#/components/schemas/MethodParameter'
          type: array
        path:
          type: string
        recordStackTrace:
          type: boolean
        returnValue:
          $ref: '#/components/schemas/MethodReturnValue'
        useRethrow:
          type: boolean
      type: object
    Field:
      properties:
        contentType:
          $ref: '#/components/schemas/ContentType'
        converter:
          type: string
        description:
          type: string
        event:
          $ref: '#/components/schemas/Event'
        expression:
          type: string
        name:
          type: string
        relationKey:
          type: string
      type: object
    FileUpload:
      type: object
    GitInfo:
      properties:
        hash:
          type: string
      type: object
    HttpServerResponse:
      properties:
        chunked:
          type: boolean
        statusCode:
          format: int32
          type: integer
        statusMessage:
          type: string
      type: object
    JsonObject:
      items:
        properties:
          key:
            type: string
          value: {}
        type: object
      type: array
    LinkedRecordingDescriptor:
      properties:
        continuous:
          type: boolean
        downloadUrl:
          type: string
        duration:
          format: int64
          type: integer
        id:
          format: int64
          type: integer
        maxAge:
          format: int64
          type: integer
        maxSize:
          format: int64
          type: integer
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          type: string
        remoteId:
          format: int64
          type: integer
        reportUrl:
          type: string
        startTime:
          format: int64
          type: integer
        state:
          $ref: '#/components/schemas/RecordingState'
        toDisk:
          type: boolean
      type: object
    Location:
      enum:
        - ENTRY
        - EXIT
        - WRAP
      type: string
    MatchExpression:
      properties:
        id:
          format: int64
          type: integer
        script:
          pattern: \S
          type: string
      required:
        - script
      type: object
    MatchedExpression:
      properties:
        expression:
          type: string
        id:
          format: int64
          type: integer
        targets:
          items:
            $ref: '#/components/schemas/Target'
          type: array
      type: object
    Metadata:
      properties:
        labels:
          additionalProperties:
            type: string
          type: object
      type: object
    MethodParameter:
      properties:
        contentType:
          $ref: '#/components/schemas/ContentType'
        converter:
          type: string
        description:
          type: string
        event:
          $ref: '#/components/schemas/Event'
        index:
          format: int32
          type: integer
        name:
          type: string
        relationKey:
          type: string
      type: object
    MethodReturnValue:
      properties:
        contentType:
          $ref: '#/components/schemas/ContentType'
        converter:
          type: string
        description:
          type: string
        event:
          $ref: '#/components/schemas/Event'
        name:
          type: string
        relationKey:
          type: string
      type: object
    PluginRegistration:
      properties:
        env:
          additionalProperties:
            type: string
          type: object
        id:
          type: string
        token:
          type: string
      type: object
    ProbeResponse:
      properties:
        description:
          type: string
        name:
          type: string
      type: object
    ProbeTemplate:
      properties:
        allowConverter:
          type: boolean
        allowToString:
          type: boolean
        classPrefix:
          type: string
        events:
          items:
            $ref: '#/components/schemas/Event'
          type: array
        fileName:
          type: string
      type: object
    ProbeTemplateResponse:
      properties:
        description:
          type: string
        name:
          type: string
      type: object
    RecordingState:
      enum:
        - NEW
        - DELAYED
        - RUNNING
        - STOPPED
        - CLOSED
      type: string
    RequestData:
      properties:
        matchExpression:
          type: string
        targetIds:
          items:
            format: int64
            type: integer
          type: array
      type: object
    Rule:
      properties:
        archivalPeriodSeconds:
          format: int32
          minimum: 0
          type: integer
        description:
          type: string
        enabled:
          type: boolean
        eventSpecifier:
          pattern: \S
          type: string
        id:
          format: int64
          type: integer
        initialDelaySeconds:
          format: int32
          minimum: 0
          type: integer
        matchExpression:
          $ref: '#/components/schemas/MatchExpression'
        maxAgeSeconds:
          format: int32
          minimum: -1
          type: integer
        maxSizeBytes:
          format: int32
          minimum: -1
          type: integer
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          pattern: \S
          type: string
        preservedArchives:
          format: int32
          minimum: 0
          type: integer
      required:
        - name
        - description
        - matchExpression
        - eventSpecifier
        - metadata
      type: object
    SerializableEventTypeInfo:
      properties:
        category:
          items:
            type: string
          type: array
        description:
          type: string
        name:
          type: string
        options:
          additionalProperties:
            $ref: '#/components/schemas/SerializableOptionDescriptor'
          type: object
        typeId:
          type: string
      type: object
    SerializableOptionDescriptor:
      properties:
        defaultValue:
          type: string
        description:
          type: string
        name:
          type: string
      type: object
    Suggestion:
      properties:
        name:
          type: string
        setting:
          type: string
        value:
          type: string
      type: object
    Target:
      properties:
        agent:
          readOnly: true
          type: boolean
        alias:
          pattern: \S
          type: string
        annotations:
          $ref: '#/components/schemas/Annotations'
        connectUrl:
          format: uri
          type: string
        id:
          format: int64
          type: integer
        jvmId:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
      required:
        - connectUrl
        - alias
        - labels
        - annotations
      type: object
    TargetStub:
      properties:
        alias:
          type: string
        connectUrl:
          format: uri
          type: string
        credential:
          allOf:
            - $ref: '#/components/schemas/Credential'
          nullable: true
          type: object
        password:
          type: string
        username:
          type: string
      type: object
    Target_Flat:
      properties:
        agent:
          readOnly: true
          type: boolean
        alias:
          pattern: \S
          type: string
        annotations:
          $ref: '#/components/schemas/Annotations_Flat'
        connectUrl:
          format: uri
          type: string
        id:
          format: int64
          type: integer
        jvmId:
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
      required:
        - connectUrl
        - alias
        - labels
        - annotations
      type: object
    Template:
      properties:
        description:
          type: string
        name:
          type: string
        provider:
          type: string
        type:
          $ref: '#/components/schemas/TemplateType'
      type: object
    TemplateType:
      enum:
        - TARGET
        - CUSTOM
        - PRESET
      type: string
    UUID:
      format: uuid
      pattern: '[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'
      type: string
    UUID_Flat:
      format: uuid
      pattern: '[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'
      type: string
info:
  contact:
    email: cryostat-development@googlegroups.com
    name: Cryostat Community
    url: https://cryostat.io
  description: Cloud-Native JDK Flight Recorder
  license:
    name: Apache 2.0
    url: https://github.com/cryostatio/cryostat/blob/main/LICENSE
  title: Cryostat API
  version: 4.1.0-snapshot
openapi: 3.0.3
paths:
  /api/beta/diagnostics/targets/{targetId}/gc:
    post:
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "201":
          description: Created
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Diagnostics
  /api/beta/fs/recordings:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArchivedRecordingDirectory'
                type: array
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Archived Recordings
  /api/beta/fs/recordings/{jvmId}:
    get:
      parameters:
        - in: path
          name: jvmId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArchivedRecordingDirectory'
                type: array
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Archived Recordings
  /api/beta/fs/recordings/{jvmId}/{filename}:
    delete:
      parameters:
        - in: path
          name: filename
          required: true
          schema:
            type: string
        - in: path
          name: jvmId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Archived Recordings
  /api/beta/recordings/{connectUrl}/{filename}:
    delete:
      parameters:
        - in: path
          name: connectUrl
          required: true
          schema:
            type: string
        - in: path
          name: filename
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Archived Recordings
  /api/beta/recordings/{jvmId}:
    get:
      parameters:
        - in: path
          name: jvmId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArchivedRecording'
                type: array
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Archived Recordings
    post:
      parameters:
        - in: path
          name: jvmId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                labels:
                  $ref: '#/components/schemas/JsonObject'
                maxFiles:
                  format: int32
                  type: integer
                recording:
                  $ref: '#/components/schemas/FileUpload'
              type: object
      responses:
        "201":
          description: Created
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Archived Recordings
  /api/v4.1/metrics/reports:
    get:
      responses:
        "200":
          content:
            text/plain:
              schema:
                items:
                  type: string
                type: array
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Analysis Report Aggregator
  /api/v4.1/metrics/reports/{jvmId}:
    get:
      parameters:
        - in: path
          name: jvmId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Analysis Report Aggregator
  /api/v4.1/targets/{targetId}/reports:
    get:
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/AnalysisResult'
                type: object
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Reports
    post:
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: clean
          schema:
            default: true
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpServerResponse'
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Reports
  /api/v4/activedownload/{id}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Active Recordings Download
  /api/v4/auth:
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          description: OK
      tags:
        - Auth
  /api/v4/credentials:
    get:
      description: |
        Returns a list of match results. A match result includes the Stored Credential's ID,
        its Match Expression, and a list of currently discovered Targets which match that expression
        and are therefore candidates for Cryostat to select this Credential.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CredentialMatchResult'
                type: array
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      summary: List information about all of the available Stored Credentials.
      tags:
        - Credentials
    post:
      description: |
        Define a new Stored Credential. Requires a match expression which defines which targets require
        this credential, and the username and password to use to pass authentication checks on those
        targets. Stored Credentials are stored in an encrypted keyring using symmetric encryption and an
        encryption key configured on the Cryostat database.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                matchExpression:
                  type: string
                password:
                  type: string
                username:
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      summary: Define a new Stored Credential
      tags:
        - Credentials
  /api/v4/credentials/test/{targetId}:
    post:
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                password:
                  type: string
                username:
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialTestResult'
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      summary: Test if the supplied username/password are valid credentials for the specified target.
      tags:
        - Credentials
  /api/v4/credentials/{id}:
    delete:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "204":
          description: No Content
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      summary: Delete a Stored Credential
      tags:
        - Credentials
    get:
      description: |
        Get match result information about a specific Stored Credential. A match result includes the Stored
        Credential's ID, its Match Expression, and a list of currently discovered Targets which match that
        expression and are therefore candidates for Cryostat to select this Credential.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialMatchResult'
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      summary: Get information about a Stored Credential
      tags:
        - Credentials
  /api/v4/discovery:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryNode'
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Discovery
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonObject'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PluginRegistration'
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Discovery
  /api/v4/discovery/{id}:
    delete:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
        - in: query
          name: token
          schema:
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - Discovery
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
        - in: query
          name: token
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Discovery
    post:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
        - in: query
          name: token
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/DiscoveryNode'
              type: array
      responses:
        "201":
          description: Created
      tags:
        - Discovery
  /api/v4/discovery_plugins:
    get:
      parameters:
        - in: query
          name: realm
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DiscoveryPlugin_Flat'
                type: array
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Discovery
  /api/v4/discovery_plugins/{id}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryPlugin'
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Discovery
  /api/v4/download/{encodedKey}:
    get:
      parameters:
        - in: path
          name: encodedKey
          required: true
          schema:
            type: string
        - in: query
          name: f
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Archived Recordings
  /api/v4/event_templates:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Template'
                type: array
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Event Templates
    post:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                template:
                  $ref: '#/components/schemas/FileUpload'
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Event Templates
  /api/v4/event_templates/{templateName}:
    delete:
      parameters:
        - in: path
          name: templateName
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Event Templates
  /api/v4/event_templates/{templateType}:
    get:
      parameters:
        - in: path
          name: templateType
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Template'
                type: array
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Event Templates
  /api/v4/event_templates/{templateType}/{templateName}:
    get:
      parameters:
        - in: path
          name: templateName
          required: true
          schema:
            type: string
        - in: path
          name: templateType
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/xml:
              schema:
                type: string
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Event Templates
  /api/v4/grafana/{encodedKey}:
    post:
      parameters:
        - in: path
          name: encodedKey
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpServerResponse'
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Archived Recordings
  /api/v4/grafana_dashboard_url:
    get:
      description: |
        Returns the URL for the associated Grafana dashboard instance. If there is an internally-accessible
        (for Cryostat) URL and an externally-accessible URL (for users) URL, the externally-accessible URL
        is preferred. If neither are configured then the response is an HTTP 400 Bad Request.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardUrl'
          description: OK
      summary: Return the URL which users can visit to access the associated Grafana dashboard instance.
      tags:
        - Health
  /api/v4/grafana_datasource_url:
    get:
      description: |
        Returns the URL for the jfr-datasource instance which Cryostat is configured to use. This datasource
        accepts JFR file uploads from Cryostat and allows the Grafana dashboard to perform queries on the
        data within the recording file.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasourceUrl'
          description: OK
      summary: Return the URL to the associated jfr-datasource instance.
      tags:
        - Health
  /api/v4/logout:
    post:
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: OK
      tags:
        - Auth
  /api/v4/matchExpressions:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  additionalProperties: {}
                  type: object
                type: array
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Match Expressions
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestData'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchedExpression'
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Match Expressions
  /api/v4/matchExpressions/{id}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchedExpression'
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Match Expressions
  /api/v4/probes:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProbeTemplateResponse'
                type: array
          description: OK
      tags:
        - JMC Agent Templates
    post:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                probeTemplate:
                  $ref: '#/components/schemas/FileUpload'
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProbeTemplate'
          description: OK
      tags:
        - JMC Agent Templates
  /api/v4/probes/{probeTemplateName}:
    delete:
      parameters:
        - in: path
          name: probeTemplateName
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
      tags:
        - JMC Agent Templates
  /api/v4/recordings:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArchivedRecording'
                type: array
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Archived Recordings
    post:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                labels:
                  $ref: '#/components/schemas/JsonObject'
                recording:
                  $ref: '#/components/schemas/FileUpload'
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: {}
                type: object
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Archived Recordings
  /api/v4/recordings/{filename}:
    delete:
      parameters:
        - in: path
          name: filename
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Archived Recordings
  /api/v4/reports/{encodedKey}:
    get:
      parameters:
        - in: path
          name: encodedKey
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpServerResponse'
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Reports
  /api/v4/rules:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Rule'
                type: array
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Rules
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
          application/x-www-form-urlencoded:
            schema:
              properties:
                archivalPeriodSeconds:
                  format: int32
                  type: integer
                description:
                  type: string
                enabled:
                  type: boolean
                eventSpecifier:
                  type: string
                initialDelaySeconds:
                  format: int32
                  type: integer
                matchExpression:
                  type: string
                maxAgeSeconds:
                  format: int32
                  type: integer
                maxSizeBytes:
                  format: int32
                  type: integer
                metadata:
                  nullable: true
                  type: string
                name:
                  type: string
                preservedArchives:
                  format: int32
                  type: integer
              type: object
          multipart/form-data:
            schema:
              properties:
                archivalPeriodSeconds:
                  format: int32
                  type: integer
                description:
                  type: string
                enabled:
                  type: boolean
                eventSpecifier:
                  type: string
                initialDelaySeconds:
                  format: int32
                  type: integer
                matchExpression:
                  type: string
                maxAgeSeconds:
                  format: int32
                  type: integer
                maxSizeBytes:
                  format: int32
                  type: integer
                metadata:
                  nullable: true
                  type: string
                name:
                  type: string
                preservedArchives:
                  format: int32
                  type: integer
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Rules
  /api/v4/rules/{name}:
    delete:
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: query
          name: clean
          schema:
            type: boolean
      responses:
        "204":
          description: No Content
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Rules
    get:
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Rules
    patch:
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: query
          name: clean
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonObject'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Rules
  /api/v4/targets:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Target'
                type: array
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Targets
    post:
      parameters:
        - in: query
          name: dryrun
          schema:
            type: boolean
        - in: query
          name: storeCredentials
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TargetStub'
          application/x-www-form-urlencoded:
            schema:
              properties:
                alias:
                  type: string
                connectUrl:
                  format: uri
                  type: string
                password:
                  type: string
                username:
                  type: string
              type: object
          multipart/form-data:
            schema:
              properties:
                alias:
                  type: string
                connectUrl:
                  format: uri
                  type: string
                password:
                  type: string
                username:
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Custom Discovery
  /api/v4/targets/{id}:
    delete:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "204":
          description: No Content
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Custom Discovery
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Targets
  /api/v4/targets/{id}/event_templates:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Template'
                type: array
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Target Event Templates
  /api/v4/targets/{id}/event_templates/{templateType}/{templateName}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: templateName
          required: true
          schema:
            type: string
        - in: path
          name: templateType
          required: true
          schema:
            $ref: '#/components/schemas/TemplateType'
      responses:
        "200":
          content:
            application/xml:
              schema:
                type: string
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Target Event Templates
  /api/v4/targets/{id}/events:
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
        - in: query
          name: q
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SerializableEventTypeInfo'
                type: array
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Events
  /api/v4/targets/{id}/probes:
    delete:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "204":
          description: No Content
      tags:
        - JMC Agent Probes
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProbeResponse'
                type: array
          description: OK
      tags:
        - JMC Agent Probes
  /api/v4/targets/{id}/probes/{probeTemplateName}:
    post:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: probeTemplateName
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created
      tags:
        - JMC Agent Probes
  /api/v4/targets/{targetId}/recordingOptions:
    get:
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: {}
                type: object
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Recording Options
    patch:
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                maxAge:
                  type: string
                maxSize:
                  type: string
                toDisk:
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: {}
                type: object
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Recording Options
  /api/v4/targets/{targetId}/recordings:
    get:
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LinkedRecordingDescriptor'
                type: array
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Active Recordings
    post:
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                archiveOnStop:
                  nullable: true
                  type: boolean
                duration:
                  format: int64
                  nullable: true
                  type: integer
                events:
                  type: string
                maxAge:
                  format: int64
                  nullable: true
                  type: integer
                maxSize:
                  format: int64
                  nullable: true
                  type: integer
                metadata:
                  nullable: true
                  type: string
                recordingName:
                  type: string
                replace:
                  nullable: true
                  type: string
                restart:
                  deprecated: true
                  nullable: true
                  type: boolean
                toDisk:
                  nullable: true
                  type: boolean
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedRecordingDescriptor'
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Active Recordings
  /api/v4/targets/{targetId}/recordings/{remoteId}:
    delete:
      parameters:
        - in: path
          name: remoteId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "204":
          description: No Content
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Active Recordings
    get:
      parameters:
        - in: path
          name: remoteId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Active Recordings
    patch:
      parameters:
        - in: path
          name: remoteId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpServerResponse'
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Active Recordings
  /api/v4/targets/{targetId}/recordings/{remoteId}/upload:
    post:
      parameters:
        - in: path
          name: remoteId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpServerResponse'
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Active Recordings
  /api/v4/targets/{targetId}/reports/{recordingId}:
    get:
      parameters:
        - in: path
          name: recordingId
          required: true
          schema:
            format: int64
            type: integer
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpServerResponse'
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Reports
  /api/v4/targets/{targetId}/snapshot:
    post:
      parameters:
        - in: path
          name: targetId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedRecordingDescriptor'
          description: OK
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
        - SecurityScheme: []
      tags:
        - Snapshots
  /api/v4/tls/certs:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
      tags:
        - Trust Store
  /health:
    get:
      description: |
        Returns a map indicating whether various external components (ex.
            jfr-datasource, grafana-dashboard) are configured and whether those
            components can be reached by the Cryostat application. Also includes
            application semantic version and build information.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationHealth'
          description: OK
      summary: Check the overall status of the application
      tags:
        - Health
  /health/liveness:
    get:
      description: |
        Performs a no-op on a worker thread. This is a simply check to determine if
        the application has available threads to service requests. HTTP 204 No Content
        is the only expected response. If the application is not live and no worker
        threads are available, then the client will never receive a response.
      responses:
        "204":
          description: No Content
      summary: Check if the application is able to accept and respond to requests.
      tags:
        - Health
