apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    io.cryostat.discovery: "true"
    io.cryostat.jmxHost: localhost
    io.cryostat.jmxPort: "0"
    io.cryostat.jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:0/jmxrmi
    kompose.service.expose: cryostat3
  creationTimestamp: null
  labels:
    io.kompose.service: cryostat
  name: cryostat
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: cryostat
  strategy: {}
  template:
    metadata:
      annotations:
        io.cryostat.discovery: "true"
        io.cryostat.jmxHost: localhost
        io.cryostat.jmxPort: "0"
        io.cryostat.jmxUrl: service:jmx:rmi:///jndi/rmi://localhost:0/jmxrmi
        kompose.service.expose: cryostat3
      creationTimestamp: null
      labels:
        io.kompose.network/compose-default: "true"
        io.kompose.service: cryostat
    spec:
      containers:
        - env:
            - name: AWS_ACCESS_KEY_ID
              value: minioroot
            - name: AWS_SECRET_ACCESS_KEY
              value: minioroot
            - name: CRYOSTAT_DISCOVERY_JDP_ENABLED
              value: "true"
            - name: CRYOSTAT_DISCOVERY_PODMAN_ENABLED
              value: "false"
            - name: JAVA_OPTS_APPEND
              value: -XX:+FlightRecorder -XX:StartFlightRecording=name=onstart,settings=default,disk=true,maxage=5m -Dcom.sun.management.jmxremote.autodiscovery=true -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9091 -Dcom.sun.management.jmxremote.rmi.port=9091 -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false
            - name: QUARKUS_DATASOURCE_DB_KIND
              value: postgresql
            - name: QUARKUS_DATASOURCE_JDBC_URL
              value: jdbc:postgresql://db:5432/cryostat3
            - name: QUARKUS_DATASOURCE_PASSWORD
              value: cryostat3
            - name: QUARKUS_DATASOURCE_USERNAME
              value: cryostat3
            - name: QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION
              value: drop-and-create
            - name: QUARKUS_S3_AWS_CREDENTIALS_STATIC_PROVIDER_ACCESS_KEY_ID
              value: minioroot
            - name: QUARKUS_S3_AWS_CREDENTIALS_STATIC_PROVIDER_SECRET_ACCESS_KEY
              value: minioroot
            - name: QUARKUS_S3_AWS_CREDENTIALS_TYPE
              value: static
            - name: QUARKUS_S3_AWS_REGION
              value: us-east-1
            - name: QUARKUS_S3_ENDPOINT_OVERRIDE
              value: http://s3:9000
            - name: QUARKUS_S3_PATH_STYLE_ACCESS
              value: "true"
            - name: STORAGE_BUCKETS_ARCHIVES_NAME
              value: archivedrecordings
          image: quay.io/cryostat/cryostat:3.0.0-snapshot
          livenessProbe:
            exec:
              command:
                - curl --fail http://localhost:8181/health/liveness || exit 1
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          name: cryostat
          ports:
            - containerPort: 8181
              hostPort: 8181
              protocol: TCP
            - containerPort: 9091
              protocol: TCP
          resources: {}
          securityContext:
            runAsUser: 0
      hostname: cryostat3
      restartPolicy: Always
status: {}
